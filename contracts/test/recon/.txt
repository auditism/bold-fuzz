        if (_minInterestRate > _maxInterestRate) {
            (_minInterestRate, _maxInterestRate) = (_maxInterestRate, _minInterestRate);
        } // hope this works ..
        _currentInterestRate =
            _currentInterestRate > _maxInterestRate ? _currentInterestRate % _maxInterestRate : _currentInterestRate; //is this ok ?
        _currentInterestRate = _currentInterestRate < _minInterestRate ? _minInterestRate + 1 : _currentInterestRate;


    function test_adjustZombie() public {
        switch_user(0);
        mintTokenToAll(100000e18);
        mintWeth(1000e18);
        priceFeed_setPrice(2000e18);
        clamped_open_trove(10e18, 2000e18, 25e16);
        switch_trove(0);
        priceFeed_setRedemptionPrice(2000e18);
        collateralRegistry.redeemCollateral(1000e18, 10, 1e18);
        findZombies();
        clamped_adjustZombieTrove(1e18, true, 10000e18, true, 100e18);
    }

        function stateless_createZombie(uint256 price) public {
        clamped_open_trove(10e18, 2000e18, 25e16);
        priceFeed.setRedemptionPrice(price);
        collateralRegistry.redeemCollateral(1000e18, 10, 1e18);
        revert("stateless");
    }

        function stateless_withdrawBold() public {
        currentTrove = clamped_open_trove(10e18, 2000e18, 24e16);
        BO_withdrawBold(currentTrove, 10e18, 2e18);
        revert("stateless");
    }

    function stateless_withdrawColl() public {
        currentTrove = clamped_open_trove(10e18, 2000e18, 23e16);
        BO_withdrawColl(currentTrove, 1e18);
        revert("stateless");
    }

        function stateless_adjustZombie() public {
        clamped_open_trove(10e18, 2000e18, 25e16);
        switch_trove(0);
        priceFeed.setRedemptionPrice(2000e18);
        collateralRegistry.redeemCollateral(1000e18, 10, 1e18);
        findZombies();
        clamped_adjustZombieTrove(0, false, 1100e18, true, 100e18);
        revert("stateless");
    }

        function stateless_zombie_adjust_batch() public {
        clamped_openTroveAndJoinInterestBatchManager(11e18, 2000e18);
        priceFeed.setRedemptionPrice(20000e18);
        collateralRegistry.redeemCollateral(500e18, 10, 1e18);
        findZombies();
        switch_zombie(0);
        clamped_adjustZombieTrove(1e18, true, 10000e18, true, 1000e18);
        revert("stateless");
    }

        function stateless_close_trove(uint256 amt) public {
        clamped_open_trove(10e18, 2000e18, 25e16);
        mintBold(amt);
        BO_closeTrove();
        revert("stateless");
    }

////////////////////////////////////////

    // bool deployed;
    // function deployment(
    //     uint256 ccr,
    //     uint256 mcr,
    //     uint256 scr,
    //     uint256 liquidationPenaltySP,
    //     uint256 liquidationPenaltyRedistribution
    // ) public {
    //     if (!deployed) {
    //         (ccr, mcr, scr, liquidationPenaltySP, liquidationPenaltyRedistribution) =
    //             _fix_deploy_args(ccr, mcr, scr, liquidationPenaltySP, liquidationPenaltyRedistribution);
    //         deploy(owner, ccr, mcr, scr, liquidationPenaltySP, liquidationPenaltyRedistribution);
    //         deployed = true;

    //     }
    // }

/////////////////////////////////////////

    function stateless_zombie_applyPendingDebt(
        uint256 boldAmt,
        bool increaseDebt,
        uint256 maxFee,
        uint256 redemtpionPrice
    ) public {
        clamped_open_trove(10e18, 2000e18, 25e16);
        priceFeed.setRedemptionPrice(redemtpionPrice);
        collateralRegistry.redeemCollateral(1000e18, 10, 1e18);
        clamped_adjustZombieTrove(0, false, boldAmt, true, maxFee);
        BO_applyPendingDebt(currentZombieTrove, 0, 0);
        t(false, "QnD");
        revert("stateless");
    }

////////////////////////////////////////


//     mapping(address => BatchDebt) memory batchInterest;
    
//     uint256 len = troveManager.getTroveIdsCount();



//     for (uint256 i; i < len; i++) {
//         int256 trove = troveManager.getTroveFromTroveIdsArray(i);
//         LatestTroveData troveData = troveManager.Troves(trove);
        

//         if (troveData.batchManager == address(0)) continue;
        
//         LatestBatchData memory batchData = troveManager.getLatestBatchData(troveData.batchManager);
        
        
//         batchDebt[batchManager].sumOfShares += 
//     }

//     // 2. Prepare results for all batches
//     BatchDebtCheck[] memory results = new BatchDebtCheck[](batchAddresses.length);
    
//     for (uint256 j = 0; j < batchAddresses.length; j++) {
//         address batchAddr = batchAddresses[j];
//         LatestBatchData memory bd;
//         _getLatestBatchData(batchAddr, bd);

//         results[j] = BatchDebtCheck({
//             batchManager: batchAddr,
//             calculatedDebt: batchDebtSum[batchAddr],
//             recordedDebt: bd.entireDebtWithoutRedistribution,
//             isValid: batchDebtSum[batchAddr] == bd.entireDebtWithoutRedistribution
//         });
//     }

//     return results;
// }
//     }


/////////////////////////////////////////

        // SPDX-License-Identifier: GPL-2.0
pragma solidity ^0.8.0;

import {AddressesRegistry} from "src/AddressesRegistry.sol";
import {ActivePool} from "src/ActivePool.sol";
import {BaseSetup} from "@chimera/BaseSetup.sol";
import {BoldToken} from "src/BoldToken.sol";
import {BorrowerOperations} from "src/BorrowerOperations.sol";
import {CollateralRegistry} from "src/CollateralRegistry.sol";
import {CollSurplusPool} from "src/CollSurplusPool.sol";
import {console} from "forge-std/console.sol";

import {DefaultPool} from "src/DefaultPool.sol";
import {ERC20Token} from "./mocks/ERC20.sol";
import {GasPool} from "src/GasPool.sol";

import {FixedAssetReader} from "src/NFTMetadata/utils/FixedAssets.sol";
import {IAddressesRegistry} from "src/Interfaces/IAddressesRegistry.sol";
import {IERC20Metadata} from "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol";

import {IInterestRouter} from "src/Interfaces/IInterestRouter.sol";
import {ITroveManager} from "src/Interfaces/ITroveManager.sol";

import {IWETH} from "src/Interfaces/IWETH.sol";
import {HintHelpers} from "src/HintHelpers.sol";
import {MetadataNFT} from "src/NFTMetadata/MetadataNFT.sol";
import {MockPriceFeed} from "./mocks/MockPriceFeed.sol";
import {MultiTroveGetter} from "src/MultiTroveGetter.sol";
import {PredeployCalculator} from "./PredeployCalculator.sol";
import {TroveManager} from "src/TroveManager.sol";
import {TroveNFT} from "src/TroveNFT.sol";
import {StabilityPool} from "src/StabilityPool.sol";
import {SortedTroves} from "src/SortedTroves.sol";

import {Asserts} from "@chimera/Asserts.sol";
import {Weth} from "./mocks/WETH.sol";

abstract contract Setup is BaseSetup, PredeployCalculator {
    AddressesRegistry addressesRegistry;
    ActivePool activePool;

    BoldToken boldToken;
    BorrowerOperations borrowerOperations;
    CollSurplusPool collSurplusPool;
    CollateralRegistry collateralRegistry;
    DefaultPool defaultPool;
    GasPool gasPool;
    IInterestRouter interestRouter;

    FixedAssetReader fixedAssetReader;
    HintHelpers hintHelpers;
    MetadataNFT metadataNFT;
    MockPriceFeed priceFeed;
    MultiTroveGetter multiTroveGetter;

    TroveManager troveManager;
    TroveNFT troveNFT;
    StabilityPool stabilityPool;
    SortedTroves sortedTroves;
    ERC20Token collateral;
    Weth weth;

    address[] precomputed;
    address[] users;

    uint256[] activeTroves;
    uint256[] batchTroves;
    uint256[] zombieTroves;

    // USERS
    address owner = address(this);
    address bob = address(123);
    address patrick = address(234);
    address schneider = address(345);
    address interestManager = address(888);

    address currentUser;
    uint256 currentTrove;
    uint256 currentBatchTrove;
    uint256 currentZombieTrove;

    uint256 timestamp;
    ///

    // address currentActor;
    uint256 randomUnit; //NOTE FOR SWITCH

    function setup() internal virtual override {
        users.push(owner);
        users.push(bob);
        users.push(patrick);
        users.push(schneider);
        users.push(bob);
        //HELPER
        bytes4[] memory fixedAsset;
        FixedAssetReader.Asset[] memory assets;
        weth = new Weth();
        collateral = new ERC20Token(); // N 2

        //     _ccr  _mcr    _scr
        addressesRegistry = new AddressesRegistry(owner, 1.5e18, 1.5e18, 1.5e18, 1e17, 1.5e17); //consider programmatic deployment, yes and do not forget the dictionary
        precomputed = setupPrecomputedAddresses(address(this));

        IAddressesRegistry.AddressVars memory vars = IAddressesRegistry.AddressVars({
            activePool: ActivePool(precomputed[0]),
            boldToken: BoldToken(precomputed[1]),
            borrowerOperations: BorrowerOperations(precomputed[2]),
            collSurplusPool: CollSurplusPool(precomputed[3]),
            collateralRegistry: CollateralRegistry(precomputed[4]), // Not in deployment list
            collToken: ERC20Token(collateral),
            defaultPool: DefaultPool(precomputed[5]),
            gasPoolAddress: precomputed[7],
            hintHelpers: HintHelpers(precomputed[8]),
            interestRouter: IInterestRouter(address(666)),
            metadataNFT: MetadataNFT(precomputed[9]),
            multiTroveGetter: MultiTroveGetter(precomputed[10]),
            priceFeed: MockPriceFeed(precomputed[11]),
            sortedTroves: SortedTroves(precomputed[12]),
            stabilityPool: StabilityPool(precomputed[13]),
            troveManager: TroveManager(precomputed[14]),
            troveNFT: TroveNFT(precomputed[15]),
            WETH: IWETH(weth)
        });
        addressesRegistry.setAddresses(vars); // nonce 3

        ITroveManager[] memory troveManagers = new ITroveManager[](1);
        IERC20Metadata[] memory erc20Tokens = new IERC20Metadata[](1);
        ////////////////

        troveManagers[0] = TroveManager(precomputed[14]);
        erc20Tokens[0] = IWETH(weth);

        // do i need to separate stuff ?
        activePool = new ActivePool(addressesRegistry);
        boldToken = new BoldToken(owner);
        borrowerOperations = new BorrowerOperations(addressesRegistry);
        collSurplusPool = new CollSurplusPool(addressesRegistry);
        collateralRegistry = new CollateralRegistry(boldToken, erc20Tokens, troveManagers);
        defaultPool = new DefaultPool(addressesRegistry);
        fixedAssetReader = new FixedAssetReader(address(1), fixedAsset, assets);
        gasPool = new GasPool(addressesRegistry);
        hintHelpers = new HintHelpers(collateralRegistry);
        interestRouter = IInterestRouter(address(666));
        metadataNFT = new MetadataNFT(fixedAssetReader);
        multiTroveGetter = new MultiTroveGetter(collateralRegistry);
        priceFeed = new MockPriceFeed(1e18);
        sortedTroves = new SortedTroves(addressesRegistry);
        stabilityPool = new StabilityPool(addressesRegistry);
        troveManager = new TroveManager(addressesRegistry);
        troveNFT = new TroveNFT(addressesRegistry);

        boldToken.setBranchAddresses(
            address(troveManager), address(stabilityPool), address(borrowerOperations), address(activePool)
        );
        boldToken.setCollateralRegistry(address(collateralRegistry));
    }
}
